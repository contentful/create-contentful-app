#! /bin/usr/env node
// @ts-check

const {
  TEMPLATE_PATH,
  TEST_REPORT_PATH,
  printErrorAndExit,
  printSuccess,
  validateAndRead,
  createGitClient,
  createGithubClient,
  PULL_REQUEST_TITLE,
  OWNER,
  REPOSITORY
} = require('./utils');

const getCompatibilityBadge = (report) => {
  const testLine = report.split('\n').find(i => i.startsWith('Tests:'));

  const [_, passed = '0', total = '0'] = /(\d) passed, (\d) total/.exec(testLine) || [];
  const compatibilityScore = (Number.parseInt(passed) * 100) / Number.parseInt(total);

  const compatibilityColor = compatibilityScore === 100
    ? 'green'
    : compatibilityScore > 80
      ? 'yellow'
      : 'red';

  return `https://img.shields.io/badge/compatibility-${compatibilityScore}%25-${compatibilityColor}`;
};

const createPullRequestMessage = (report) => `
Bumps dependencies in \`template.json\` with most up to date versions as of today.

![compatibility score](${getCompatibilityBadge(report)})

<details>
<summary>Test Report</summary>
<pre>
${report}
</pre>
</details>
`;

const githubClient = createGithubClient();
const gitClient = createGitClient();
const BRANCH_NAME = `chore/update-dependencies-${Date.now()}`;

(async function main() {
  const diffSummary = await gitClient.diffSummary();

  if (diffSummary.files.length === 0) {
    printSuccess('Dependencies are up to date! Not creating a pull request');
    process.exit(0);
  }

  await gitClient
    .addConfig('user.name', 'Dependency Checker')
    .addConfig('user.email', 'dependency-checker@contentful.org');

  await gitClient.checkoutBranch(BRANCH_NAME, 'master');

  await gitClient.add([TEMPLATE_PATH]);

  await gitClient.commit('chore(deps): update dependencies');

  await gitClient.push(['-u', 'origin', BRANCH_NAME]);

  const testReport = validateAndRead(TEST_REPORT_PATH);

  const { data: newPullRequest } = await githubClient.pulls.create({
    owner: OWNER,
    repo: REPOSITORY,
    title: PULL_REQUEST_TITLE,
    head: BRANCH_NAME,
    base: 'master',
    body: createPullRequestMessage(testReport)
  });

  await githubClient.issues.addLabels({
    owner: OWNER,
    repo: REPOSITORY,
    issue_number: newPullRequest.number,
    labels: ['dependencies']
  })

  // Try closing previous Dependency Check Pull Requests, if any
  const { data: pullRequests } = await githubClient.pulls.list({ owner: OWNER, repo: REPOSITORY, state: 'open' });

  for (const pullRequest of pullRequests) {
    if (pullRequest.title === PULL_REQUEST_TITLE && pullRequest.number !== newPullRequest.number) {
      await githubClient.issues.createComment({
        owner: OWNER,
        repo: REPOSITORY,
        issue_number: pullRequest.number,
        body: `Closed in favor of #${newPullRequest.number}`
      });

      await githubClient.pulls.update({
        owner: OWNER,
        repo: REPOSITORY,
        pull_number: pullRequest.number,
        state: 'closed'
      });

      await githubClient.git.deleteRef({
        owner: OWNER,
        repo: REPOSITORY,
        ref: `heads/${pullRequest.head.ref}`
      })
    }
  }
})().catch(e => {
  printErrorAndExit('Unable to create a pull request', e);
});
