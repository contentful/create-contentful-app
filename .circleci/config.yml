version: 2.1

orbs:
  vault: contentful/vault@1
  nx: nrwl/nx@1.6.1

environment: &base-env
  NPM_CONFIG_PROGRESS: 'false'
  NPM_CONFIG_LOGLEVEL: warn

executors:
  node-container-18:
    docker:
      - image: cimg/node:18.20
        environment: *base-env

  node-container-20:
    docker:
      - image: cimg/node:20.18
        environment: *base-env

  node-container-22:
    docker:
      - image: cimg/node:22.11
        environment: *base-env

  windows:
    machine:
      image: 'windows-server-2022-gui:current'
      shell: 'powershell.exe -ExecutionPolicy Bypass'
    resource_class: windows.medium
    environment:
      *base-env

commands:
  install-deps:
    parameters:
      os:
        type: string
        default: linux
    steps:
      - when:
          condition:
            not:
              equal: [windows, << parameters.os >>]
          steps:
            - run:
                name: Install Dependencies (Linux)
                command: npm ci && npm run bootstrap
      - when:
          condition:
            equal: [windows, << parameters.os >>]
          steps:
            - run:
                name: Install Dependencies (Windows)
                command: |
                  npm ci
                  if ($LASTEXITCODE -eq 0) {
                    npm run bootstrap
                  } else {
                    exit $LASTEXITCODE
                  }

  install-node-windows:
    steps:
      - run:
          name: Install Node.js 22
          command: |
            Write-Host "Downloading Node.js 22.11.0..."
            $webClient = New-Object System.Net.WebClient
            $nodeUrl = "https://nodejs.org/dist/v22.11.0/node-v22.11.0-x64.msi"
            $nodeMsi = Join-Path $env:TEMP "node-install.msi"
            $webClient.DownloadFile($nodeUrl, $nodeMsi)
            
            Write-Host "Installing Node.js..."
            Start-Process msiexec.exe -ArgumentList "/i `"$nodeMsi`" /qn /norestart" -Wait
            Remove-Item $nodeMsi -Force
            
            Write-Host "Refreshing PATH..."
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
            
            Write-Host "Node.js version:"
            node --version
            Write-Host "NPM version:"
            npm --version

  build:
    steps:
      - run:
          name: Build
          command: npm run build

  lint-and-test:
    parameters:
      os:
        type: string
        default: linux
    steps:
      - checkout
      - install-deps:
          os: << parameters.os >>
      - build
      - when:
          condition:
            not:
              equal: [windows, << parameters.os >>]
          steps:
            - run:
                name: Run Linter
                command: npm run lint
      - run:
          name: Run Tests
          command: npm run test

  test-built-app:
    parameters:
      os:
        type: string
        default: linux
    steps:
      - checkout
      - install-deps:
          os: << parameters.os >>
      - build
      - when:
          condition:
            not:
              equal: [windows, << parameters.os >>]
          steps:
            - run:
                name: Run Tests (Unix)
                command: |
                  FORMER_CWD="$(pwd)"
                  PROJECT=test-$(date +%s)
                  mkdir "/tmp/${PROJECT}"
                  cd "/tmp/${PROJECT}"
                  node "${FORMER_CWD}/packages/contentful--create-contentful-app/lib/index.js" --typescript test
                  cd test
                  npm t
      - when:
          condition:
            equal: [windows, << parameters.os >>]
          steps:
            - run:
                name: Run Tests (Windows)
                command: |
                  $FORMER_CWD = (Get-Location).Path
                  $PROJECT = "test-" + [DateTimeOffset]::Now.ToUnixTimeSeconds()
                  $TEMP_DIR = [System.IO.Path]::GetTempPath()
                  $PROJECT_PATH = Join-Path $TEMP_DIR $PROJECT
                  New-Item -ItemType Directory -Path $PROJECT_PATH
                  Set-Location $PROJECT_PATH
                  node (Join-Path $FORMER_CWD "packages/contentful--create-contentful-app/lib/index.js") --typescript test
                  Set-Location test
                  npm t

  test-built-functions:
    parameters:
      os:
        type: string
        default: linux
    steps:
      - checkout
      - install-deps:
          os: << parameters.os >>
      - build
      - when:
          condition:
            not:
              equal: [windows, << parameters.os >>]
          steps:
            - run:
                name: Run build with functions (Unix)
                command: |
                  FORMER_CWD="$(pwd)"
                  PROJECT=test-$(date +%s)
                  mkdir "/tmp/${PROJECT}"
                  cd "/tmp/${PROJECT}"
                  node "${FORMER_CWD}/packages/contentful--create-contentful-app/lib/index.js" my-function --function external-references
                  cd my-function   
                  node "${FORMER_CWD}/packages/contentful--app-scripts/lib/bin.js" build-functions --ci
      - when:
          condition:
            equal: [windows, << parameters.os >>]
          steps:
            - run:
                name: Run build with functions (Windows)
                command: |
                  $FORMER_CWD = (Get-Location).Path
                  $PROJECT = "test-" + [DateTimeOffset]::Now.ToUnixTimeSeconds()
                  $TEMP_DIR = [System.IO.Path]::GetTempPath()
                  $PROJECT_PATH = Join-Path $TEMP_DIR $PROJECT
                  New-Item -ItemType Directory -Path $PROJECT_PATH
                  Set-Location $PROJECT_PATH
                  node (Join-Path $FORMER_CWD "packages/contentful--create-contentful-app/lib/index.js") my-function --function external-references
                  Set-Location my-function
                  node (Join-Path $FORMER_CWD "packages/contentful--app-scripts/lib/bin.js") build-functions --ci

  prepare-release:
    steps:
      - checkout
      - vault/get-secrets:
          template-preset: 'semantic-release'
      - vault/configure-lerna
      - run: echo "//npm.pkg.github.com/:_authToken=${GITHUB_PACKAGES_WRITE_TOKEN}" >> ~/.npmrc
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
      - run: echo "@contentful:registry=https://npm.pkg.github.com" >> ~/.npmrc
      - install-deps:
          os: linux
      - build

jobs:
  release:
    executor: node-container-18
    steps:
      - prepare-release
      - run: npm run version
      - run: npm run publish-packages

  release-canary:
    executor: node-container-18
    steps:
      - prepare-release
      - run: npm run version:canary
      - run: npm run publish-packages:canary

  lint-and-test-18:
    executor: node-container-18
    steps:
      - lint-and-test

  lint-and-test-20:
    executor: node-container-20
    steps:
      - lint-and-test

  lint-and-test-22:
    executor: node-container-22
    steps:
      - lint-and-test

  test-built-app-18:
    executor: node-container-18
    steps:
      - test-built-app

  test-built-app-20:
    executor: node-container-20
    steps:
      - test-built-app

  test-built-app-22:
    executor: node-container-22
    steps:
      - test-built-app

  test-built-app-18-functions:
    executor: node-container-18
    steps:
      - test-built-functions

  test-built-app-20-functions:
    executor: node-container-20
    steps:
      - test-built-functions

  test-built-app-22-functions:
    executor: node-container-22
    steps:
      - test-built-functions

  lint-and-test-22-windows:
    executor: windows
    steps:
      - install-node-windows
      - lint-and-test:
          os: windows

  test-built-app-22-windows:
    executor: windows
    steps:
      - install-node-windows
      - test-built-app:
          os: windows

  test-built-app-22-functions-windows:
    executor: windows
    steps:
      - install-node-windows
      - test-built-functions:
          os: windows

workflows:
  test:
    jobs:
      - lint-and-test-18:
          context:
            - vault
      - test-built-app-18:
          context:
            - vault
          requires:
            - lint-and-test-18
      - test-built-app-18-functions:
          context:
            - vault
      - lint-and-test-20:
          context:
            - vault
      - test-built-app-20:
          context:
            - vault
          requires:
            - lint-and-test-20
      - test-built-app-20-functions:
          context:
            - vault
      - lint-and-test-22:
          context:
            - vault
      - test-built-app-22:
          context:
            - vault
          requires:
            - lint-and-test-22
      - test-built-app-22-functions:
          context:
            - vault
      # Windows jobs - Node 22 only
      - lint-and-test-22-windows:
          context:
            - vault
      - test-built-app-22-windows:
          context:
            - vault
          requires:
            - lint-and-test-22-windows
      - test-built-app-22-functions-windows:
          context:
            - vault
      - release:
          context:
            - vault
          filters:
            branches:
              only: main
          requires:
            - test-built-app-18
            - test-built-app-18-functions
            - test-built-app-20
            - test-built-app-20-functions
            - test-built-app-22
            - test-built-app-22-functions
            - test-built-app-22-windows
            - test-built-app-22-functions-windows

      - release-canary:
          context:
            - vault
          filters:
            branches:
              only: canary
          requires:
            - test-built-app-18
            - test-built-app-18-functions
            - test-built-app-20
            - test-built-app-20-functions
            - test-built-app-22
            - test-built-app-22-functions
            - test-built-app-22-windows
            - test-built-app-22-functions-windows
