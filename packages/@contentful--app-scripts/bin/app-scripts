#!/usr/bin/env node

const { program } = require('commander');
const { version } = require('../package.json');

const {createAppDefinition, upload, activate} = require('../')


async function runCommand(command, options) {
  const {ci} = program.opts()
  return ci ? await command.nonInteractive(options) : await command.interactive(options);
}

(async function main() {
  program
    .version(version)
    .option('--ci', 'Execute in non-interactive mode', false)

  program
    .command('create-app-definition')
    .description('Create a new AppDefinition for an App')
    .action(async (options) => {
      await runCommand(createAppDefinition, options);
    })

  program
    .command('upload')
    .description('Upload your build folder and create an app bundle')
    .option('--bundle-dir [directory]', 'The directory of your build folder')
    .option('--organization-id [orgId]', 'The id of your organization')
    .option('--definition-id [defId]', 'The id of your apps definition')
    .option('--token [accessToken]', 'Your content management access token')
    .option('--comment [comment]', 'Optional comment for the created bundle')
    .action(async (options) => {
      await runCommand(upload, options);
    })

  program
    .command('activate')
    .description('Upload your build folder and create an app bundle')
    .option('--bundle-id [bundleId]', 'The id of your bundle')
    .option('--organization-id [orgId]', 'The id of your organisation')
    .option('--definition-id  [defId]', 'The id of your apps definition')
    .option('--token [accessToken]', 'Your content management access token')
    .action((options) => {
      runCommand(activate, options);
    })

  await program.parseAsync(process.argv);
})().catch(e => {
  console.error(e);
  // eslint-disable-next-line no-process-exit
  process.exit(1);
})
